:load test.ml
:quit
let rec f x = f x;
:load test.ml
:quit
1:2:[]
1:[]
[1,2,3]
1:2:[]
1:[]
:quit
1:[]
:quit
1:[]
:quit
1:[]
:quit
1:[]
:quit
1:[]
:quit
1:[]
cabal run
:quit
1:[]
:quit
x
let x = 1:[]
:quit
1:[2,3]
let x = 1:[]
1:[]
:quit
1:[2,3]
1:[2,3}
x
let x = 1:[]
:quit
1:[]
:quit
1:[]
:quit
why nigga
1:[]
z
y
let z = 1:[]
let y = [1,2,3]
let x = []
:quit
let w = 3 + 2
let z = 1:[]
let y = [1,2,3]
let x = []
:quit
let x = []
:quit
let f y = x + y
let x = 3 + 2
:quit
let x = 3 + 2
:quit
let f y = x + y
let x = 3
let x = 3 + 2
:quit
let x = 3 + 2
:quit
let f y = x + y
let x = 3
let x = 3 + 2
:quit
1:2:[]
1:[]
1:[]
1:2:[]
1:[]
[1,2,3]
[]
:quit
[1,2,3]
1:2:[]
1:[]
:quit
1:2:[]
1:[]
[1,2,3]
[]
1+2
:quit
1:[]
:quit
1:2:[]
1:[]
1:[]
:quit
quit
1:[]
:quit
1:[]
